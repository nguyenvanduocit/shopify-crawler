// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aiocean/shopify-crawler/internal/cqrssvc"
	"github.com/aiocean/shopify-crawler/internal/cqrssvc/router"
	"github.com/aiocean/shopify-crawler/internal/logsvc"
	"github.com/aiocean/shopify-crawler/internal/modules"
	"github.com/aiocean/shopify-crawler/internal/modules/linkcollector"
	"github.com/aiocean/shopify-crawler/internal/server"
)

// Injectors from wire.go:

func InitializeHandler(ctx context.Context) (*server.Server, func(), error) {
	getLinkHandler, cleanup, err := linkcollector.NewGetLinkHandler()
	if err != nil {
		return nil, nil, err
	}
	linkCollectorModule := linkcollector.NewLinkCollectorModule(getLinkHandler)
	v := modules.NewModuleList(linkCollectorModule)
	logger, err := logsvc.NewLoggerService(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	messageRouter, cleanup2, err := router.NewRouter(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cqrsSvc, cleanup3, err := cqrssvc.NewCqrsSvc(logger, messageRouter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverServer, cleanup4, err := server.NewServer(v, cqrsSvc, messageRouter)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return serverServer, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
